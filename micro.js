(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var ajax, dom, localstorage, u, utils;

u = require("./micro.core.coffee");

dom = require("./micro.dom.coffee");

utils = require("./micro.utils.coffee");

localstorage = require("./micro.localstorage.coffee");

ajax = require("./micro.ajax.coffee");

utils.extend(u.prototype, dom);

utils.extend(u, utils, {
  db: localstorage
}, ajax);

if (typeof window !== 'undefined') {
  window.u = u;
}

module.exports = u;



},{"./micro.ajax.coffee":2,"./micro.core.coffee":3,"./micro.dom.coffee":4,"./micro.localstorage.coffee":5,"./micro.utils.coffee":6}],2:[function(require,module,exports){
"use strict";
var DEFAULT, MIME_TYPES, ajax, db, utils, _cacheNotExpired, _cacheRequest, _checkCache, _msToMin, _parseResponse, _xhrHeaders;

utils = require("./micro.utils.coffee");

db = require("./micro.localstorage.coffee");

DEFAULT = {
  TYPE: "GET",
  MIME: "json"
};

MIME_TYPES = {
  json: "application/json",
  form: "application/x-www-form-urlencoded",
  html: "text/html",
  text: "text/plain"
};

ajax = {
  ajaxSettings: {
    type: DEFAULT.TYPE,
    async: true,
    cache: false,
    cacheDB: 'xhrs',
    minutesCached: 5,
    success: function(res) {},
    error: function(res) {},
    dataType: DEFAULT.MIME,
    headers: {},
    crossDomain: false,
    timeout: 0
  },
  ajax: function(options) {
    var settings, xhr;
    this.ajaxSettings.headers = {};
    settings = utils.extend({}, this.ajaxSettings);
    options = utils.extend(settings, options);
    if (options.cache && _checkCache(options)) {
      return options.success(_checkCache(options));
    }
    options.data = this.serialize(options);
    xhr = new XMLHttpRequest();
    xhr.open(options.type, options.url, options.async);
    xhr.onload = function() {
      var data;
      if (xhr.status >= 200 && xhr.status < 400) {
        data = _parseResponse(xhr, options);
        if (options.cache) {
          _cacheRequest(data, options);
        }
        return options.success(data);
      }
    };
    xhr.onerror = function() {
      return options.error('error');
    };
    _xhrHeaders(xhr, options);
    xhr.send(options.data);
    return xhr;
  },
  serialize: function(options) {
    var data;
    data = options.data;
    if (options.dataType === DEFAULT.MIME) {
      data = JSON.stringify(options.data);
    }
    return data;
  }
};

_xhrHeaders = function(xhr, options) {
  var header;
  if (options.dataType) {
    options.headers['Content-Type'] = MIME_TYPES[options.dataType];
  }
  if (options.dataType) {
    options.headers['Accept'] = MIME_TYPES[options.dataType];
  }
  for (header in options.headers) {
    xhr.setRequestHeader(header, options.headers[header]);
  }
};

_parseResponse = function(xhr, options) {
  var response;
  response = xhr;
  if (options.dataType === DEFAULT.MIME) {
    response = JSON.parse(xhr.responseText);
  }
  return response;
};

_msToMin = function(ms) {
  return ms / 1000 / 60;
};

_cacheNotExpired = function(req, expireTime) {
  if (_msToMin(new Date() - new Date(req.date)) < expireTime) {
    return true;
  }
};

_cacheRequest = function(data, options) {
  var item, xhrData;
  item = {
    url: options.url,
    date: new Date(),
    data: data
  };
  xhrData = db.findOne(options.cacheDB, {
    url: options.url
  });
  return db.update(options.cacheDB, xhrData.uuid, item);
};

_checkCache = function(options) {
  var cache;
  cache = db.findOne(options.cacheDB, {
    url: options.url
  });
  if (cache && _cacheNotExpired(cache, options.minutesCached)) {
    return cache.data;
  }
};

module.exports = ajax;



},{"./micro.localstorage.coffee":5,"./micro.utils.coffee":6}],3:[function(require,module,exports){
'use strict';
var forEach, push, slice, u;

forEach = Array.prototype.forEach;

push = Array.prototype.push;

slice = Array.prototype.slice;

u = function(selector) {
  if (!(this instanceof u)) {
    return new u(selector);
  }
  if (!selector) {
    return this;
  }
  if (selector instanceof u) {
    return selector;
  }
  if (typeof selector === 'string') {
    return push.apply(this, slice.call(document.querySelectorAll(selector)));
  }
  if (typeof selector === 'function') {
    return u(document).ready(selector);
  }
};

u.prototype = {
  length: 0
};

u.VERSION = '0.2.0';

module.exports = u;



},{}],4:[function(require,module,exports){
'use strict';
var forEach, manipulationsMethods, push, slice;

forEach = Array.prototype.forEach;

push = Array.prototype.push;

slice = Array.prototype.slice;

manipulationsMethods = {
  each: function(callback) {
    forEach.call(this, function(el, idx) {
      return callback.call(el, idx);
    });
    return this;
  },
  ready: function(callback) {
    if (document.readyState === 'complete') {
      callback(u);
    }
    return document.addEventListener('DOMContentLoaded', function() {
      return callback(u);
    });
  },
  text: function(value) {
    if (value === void 0) {
      return this[0].textContent;
    }
    return this.each(function() {
      return this.textContent = value;
    });
  },
  find: function(selector) {
    var results;
    results = new u();
    this.each(function() {
      window.el = this;
      return push.apply(results, slice.call(this.querySelectorAll(selector)));
    });
    return results;
  },
  html: function(value) {
    if (value === void 0) {
      return this[0].innerHTML;
    }
    return this.each(function() {
      return this.innerHTML = value;
    });
  },
  append: function(el) {
    return this.each(function() {
      return this.appendChild(el);
    });
  },
  prepend: function(el) {
    return this.each(function() {
      return this.insertBefore(el, this.firstChild);
    });
  },
  on: function(type, func) {
    return this.each(function() {
      return this.addEventListener(type, func);
    });
  },
  off: function(type, func) {
    return this.each(function() {
      return this.removeEventListener(type, func);
    });
  }
};

module.exports = manipulationsMethods;



},{}],5:[function(require,module,exports){
"use strict";
var localDB, _extend, _filter, _filterOne, _matches, _uuid,
  __slice = [].slice;

localDB = {
  data: {},
  _checkCollection: function(collection) {
    if (this.data[collection]) {
      return;
    }
    if (this.load(collection)) {
      return this.data[collection];
    }
    return this.data[collection] = [];
  },
  load: function(collection) {
    if (localStorage.getItem(collection)) {
      this.data[collection] = JSON.parse(localStorage.getItem(collection));
      return true;
    }
    return false;
  },
  clear: function(collection) {
    this.data[collection] = null;
    return localStorage.removeItem(collection);
  },
  write: function(collection) {
    return localStorage.setItem(collection, JSON.stringify(this.data[collection]));
  },
  save: function(collection, data) {
    this._checkCollection(collection);
    data.uuid = _uuid();
    this.data[collection].push(data);
    this.write(collection);
    return _extend({}, data);
  },
  findOne: function(collection, attrs) {
    this._checkCollection(collection);
    if (!attrs) {
      return {};
    }
    return _filterOne(this.data[collection], _matches(attrs));
  },
  find: function(collection, attrs) {
    this._checkCollection(collection);
    if (!attrs) {
      return this.data[collection];
    }
    return _filter(this.data[collection], _matches(attrs));
  },
  update: function(collection, id, attrs) {
    var data, item, key, val, _i, _len, _ref;
    this._checkCollection(collection);
    _ref = this.data[collection];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      if (item.uuid === id) {
        data = item;
      }
    }
    if (!data) {
      data = {};
      data.uuid = _uuid();
      this.data[collection].push(data);
    }
    if (data) {
      for (key in attrs) {
        val = attrs[key];
        data[key] = val;
      }
    }
    this.write(collection);
    return _extend({}, data);
  },
  remove: function(collection, id) {
    var index, item, _i, _len, _ref;
    this._checkCollection(collection);
    _ref = this.data[collection];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      if (item.uuid === id) {
        index = this.data[collection].indexOf(item);
      }
    }
    if (!index && index !== 0) {
      return false;
    }
    if (index > -1) {
      this.data[collection].splice(index, 1);
    }
    this.write(collection);
    return true;
  }
};

_uuid = function() {
  var date, uuid;
  date = new Date().getTime();
  return uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r, v;
    r = (date + Math.random() * 16) % 16 | 0;
    date = Math.floor(date / 16);
    v = c === 'x' ? r : r & 7 | 8;
    return v.toString(16);
  });
};

_filter = function(obj, predicate) {
  var item, result, _i, _len;
  result = [];
  for (_i = 0, _len = obj.length; _i < _len; _i++) {
    item = obj[_i];
    if (predicate(item)) {
      result.push(_extend({}, item));
    }
  }
  return result;
};

_filterOne = function(obj, predicate) {
  var item, result, _i, _len;
  result = {};
  for (_i = 0, _len = obj.length; _i < _len; _i++) {
    item = obj[_i];
    if (predicate(item)) {
      return _extend(result, item);
    }
  }
  return result;
};

_matches = function(attrs) {
  return function(obj) {
    var key, val;
    for (key in attrs) {
      val = attrs[key];
      if (attrs[key] !== obj[key]) {
        return false;
      }
    }
    return true;
  };
};

_extend = function() {
  var args, obj;
  obj = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  args.forEach(function(source) {
    var method, _results;
    _results = [];
    for (method in source) {
      if (hasOwnProperty.call(source, method)) {
        _results.push(obj[method] = source[method]);
      }
    }
    return _results;
  });
  return obj;
};

module.exports = localDB;



},{}],6:[function(require,module,exports){
'use strict';
var utils;

utils = {
  subscribers: {},
  subscribe: function(topic, func) {
    if (!this.subscribers[topic]) {
      this.subscribers[topic] = [];
    }
    if (this.subscribers[topic].indexOf(func) === -1) {
      this.subscribers[topic].push(func);
    }
  },
  unsubscribe: function(topic, func) {
    var index, listeners;
    listeners = this.subscribers[topic];
    if (!listeners) {
      return;
    }
    index = listeners.indexOf(func);
    if (index > -1) {
      listeners.splice(index, 1);
    }
  },
  publish: function(topic, eventObj) {
    var listener, listeners, _i, _len, _results;
    if (!this.subscribers[topic]) {
      return false;
    }
    if (!eventObj.type) {
      eventObj.type = topic;
    }
    listeners = this.subscribers[topic];
    _results = [];
    for (_i = 0, _len = listeners.length; _i < _len; _i++) {
      listener = listeners[_i];
      _results.push(listener(eventObj));
    }
    return _results;
  },
  extend: function(obj) {
    var args;
    args = Array.prototype.slice.call(arguments, 1);
    args.forEach(function(source) {
      var method, _results;
      _results = [];
      for (method in source) {
        _results.push(obj[method] = source[method]);
      }
      return _results;
    });
    return obj;
  }
};

module.exports = utils;



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvZHJleWFjb3N0YS9Qcm9qZWN0cy9taWNyby5qcy9zb3VyY2UvbWljcm8uY29mZmVlIiwiL1VzZXJzL2RyZXlhY29zdGEvUHJvamVjdHMvbWljcm8uanMvc291cmNlL21pY3JvLmFqYXguY29mZmVlIiwiL1VzZXJzL2RyZXlhY29zdGEvUHJvamVjdHMvbWljcm8uanMvc291cmNlL21pY3JvLmNvcmUuY29mZmVlIiwiL1VzZXJzL2RyZXlhY29zdGEvUHJvamVjdHMvbWljcm8uanMvc291cmNlL21pY3JvLmRvbS5jb2ZmZWUiLCIvVXNlcnMvZHJleWFjb3N0YS9Qcm9qZWN0cy9taWNyby5qcy9zb3VyY2UvbWljcm8ubG9jYWxzdG9yYWdlLmNvZmZlZSIsIi9Vc2Vycy9kcmV5YWNvc3RhL1Byb2plY3RzL21pY3JvLmpzL3NvdXJjZS9taWNyby51dGlscy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxZQUFBLENBQUE7QUFBQSxJQUFBLGlDQUFBOztBQUFBLENBRUEsR0FBZSxPQUFBLENBQVEscUJBQVIsQ0FGZixDQUFBOztBQUFBLEdBR0EsR0FBZSxPQUFBLENBQVEsb0JBQVIsQ0FIZixDQUFBOztBQUFBLEtBSUEsR0FBZSxPQUFBLENBQVEsc0JBQVIsQ0FKZixDQUFBOztBQUFBLFlBS0EsR0FBZSxPQUFBLENBQVEsNkJBQVIsQ0FMZixDQUFBOztBQUFBLElBTUEsR0FBZSxPQUFBLENBQVEscUJBQVIsQ0FOZixDQUFBOztBQUFBLEtBUUssQ0FBQyxNQUFOLENBQWEsQ0FBQyxDQUFBLFNBQWQsRUFBa0IsR0FBbEIsQ0FSQSxDQUFBOztBQUFBLEtBU0ssQ0FBQyxNQUFOLENBQWEsQ0FBYixFQUFnQixLQUFoQixFQUF1QjtBQUFBLEVBQUEsRUFBQSxFQUFJLFlBQUo7Q0FBdkIsRUFBeUMsSUFBekMsQ0FUQSxDQUFBOztBQVdBLElBQWdCLE1BQUEsQ0FBQSxNQUFBLEtBQW1CLFdBQW5DO0FBQUEsRUFBQSxNQUFNLENBQUMsQ0FBUCxHQUFXLENBQVgsQ0FBQTtDQVhBOztBQUFBLE1BYU0sQ0FBQyxPQUFQLEdBQWlCLENBYmpCLENBQUE7Ozs7O0FDQUEsWUFBQSxDQUFBO0FBQUEsSUFBQSx5SEFBQTs7QUFBQSxLQUVBLEdBQVEsT0FBQSxDQUFRLHNCQUFSLENBRlIsQ0FBQTs7QUFBQSxFQUdBLEdBQVEsT0FBQSxDQUFRLDZCQUFSLENBSFIsQ0FBQTs7QUFBQSxPQUtBLEdBQ0U7QUFBQSxFQUFBLElBQUEsRUFBTSxLQUFOO0FBQUEsRUFDQSxJQUFBLEVBQU0sTUFETjtDQU5GLENBQUE7O0FBQUEsVUFTQSxHQUNFO0FBQUEsRUFBQSxJQUFBLEVBQU0sa0JBQU47QUFBQSxFQUNBLElBQUEsRUFBTSxtQ0FETjtBQUFBLEVBRUEsSUFBQSxFQUFNLFdBRk47QUFBQSxFQUdBLElBQUEsRUFBTSxZQUhOO0NBVkYsQ0FBQTs7QUFBQSxJQWVBLEdBQ0U7QUFBQSxFQUFBLFlBQUEsRUFDRTtBQUFBLElBQUEsSUFBQSxFQUFlLE9BQU8sQ0FBQyxJQUF2QjtBQUFBLElBQ0EsS0FBQSxFQUFlLElBRGY7QUFBQSxJQUVBLEtBQUEsRUFBZSxLQUZmO0FBQUEsSUFHQSxPQUFBLEVBQWUsTUFIZjtBQUFBLElBSUEsYUFBQSxFQUFlLENBSmY7QUFBQSxJQUtBLE9BQUEsRUFBZSxTQUFDLEdBQUQsR0FBQSxDQUxmO0FBQUEsSUFNQSxLQUFBLEVBQWUsU0FBQyxHQUFELEdBQUEsQ0FOZjtBQUFBLElBT0EsUUFBQSxFQUFlLE9BQU8sQ0FBQyxJQVB2QjtBQUFBLElBUUEsT0FBQSxFQUFlLEVBUmY7QUFBQSxJQVNBLFdBQUEsRUFBZSxLQVRmO0FBQUEsSUFVQSxPQUFBLEVBQWUsQ0FWZjtHQURGO0FBQUEsRUFhQSxJQUFBLEVBQU0sU0FBQyxPQUFELEdBQUE7QUFDSixRQUFBLGFBQUE7QUFBQSxJQUFBLElBQUMsQ0FBQSxZQUFZLENBQUMsT0FBZCxHQUF3QixFQUF4QixDQUFBO0FBQUEsSUFDQSxRQUFBLEdBQVcsS0FBSyxDQUFDLE1BQU4sQ0FBYSxFQUFiLEVBQWlCLElBQUMsQ0FBQSxZQUFsQixDQURYLENBQUE7QUFBQSxJQUVBLE9BQUEsR0FBVyxLQUFLLENBQUMsTUFBTixDQUFhLFFBQWIsRUFBdUIsT0FBdkIsQ0FGWCxDQUFBO0FBSUEsSUFBQSxJQUFHLE9BQU8sQ0FBQyxLQUFSLElBQWtCLFdBQUEsQ0FBWSxPQUFaLENBQXJCO0FBQ0UsYUFBTyxPQUFPLENBQUMsT0FBUixDQUFnQixXQUFBLENBQVksT0FBWixDQUFoQixDQUFQLENBREY7S0FKQTtBQUFBLElBT0EsT0FBTyxDQUFDLElBQVIsR0FBZSxJQUFDLENBQUEsU0FBRCxDQUFXLE9BQVgsQ0FQZixDQUFBO0FBQUEsSUFTQSxHQUFBLEdBQVUsSUFBQSxjQUFBLENBQUEsQ0FUVixDQUFBO0FBQUEsSUFXQSxHQUFHLENBQUMsSUFBSixDQUFTLE9BQU8sQ0FBQyxJQUFqQixFQUF1QixPQUFPLENBQUMsR0FBL0IsRUFBb0MsT0FBTyxDQUFDLEtBQTVDLENBWEEsQ0FBQTtBQUFBLElBYUEsR0FBRyxDQUFDLE1BQUosR0FBYSxTQUFBLEdBQUE7QUFDWCxVQUFBLElBQUE7QUFBQSxNQUFBLElBQUcsR0FBRyxDQUFDLE1BQUosSUFBYyxHQUFkLElBQXNCLEdBQUcsQ0FBQyxNQUFKLEdBQWEsR0FBdEM7QUFDRSxRQUFBLElBQUEsR0FBTyxjQUFBLENBQWUsR0FBZixFQUFvQixPQUFwQixDQUFQLENBQUE7QUFDQSxRQUFBLElBQUcsT0FBTyxDQUFDLEtBQVg7QUFBc0IsVUFBQSxhQUFBLENBQWMsSUFBZCxFQUFvQixPQUFwQixDQUFBLENBQXRCO1NBREE7ZUFFQSxPQUFPLENBQUMsT0FBUixDQUFnQixJQUFoQixFQUhGO09BRFc7SUFBQSxDQWJiLENBQUE7QUFBQSxJQW1CQSxHQUFHLENBQUMsT0FBSixHQUFjLFNBQUEsR0FBQTthQUNaLE9BQU8sQ0FBQyxLQUFSLENBQWMsT0FBZCxFQURZO0lBQUEsQ0FuQmQsQ0FBQTtBQUFBLElBc0JBLFdBQUEsQ0FBWSxHQUFaLEVBQWlCLE9BQWpCLENBdEJBLENBQUE7QUFBQSxJQXdCQSxHQUFHLENBQUMsSUFBSixDQUFTLE9BQU8sQ0FBQyxJQUFqQixDQXhCQSxDQUFBO1dBeUJBLElBMUJJO0VBQUEsQ0FiTjtBQUFBLEVBeUNBLFNBQUEsRUFBVyxTQUFDLE9BQUQsR0FBQTtBQUNULFFBQUEsSUFBQTtBQUFBLElBQUEsSUFBQSxHQUFPLE9BQU8sQ0FBQyxJQUFmLENBQUE7QUFDQSxJQUFBLElBQUcsT0FBTyxDQUFDLFFBQVIsS0FBb0IsT0FBTyxDQUFDLElBQS9CO0FBQ0UsTUFBQSxJQUFBLEdBQU8sSUFBSSxDQUFDLFNBQUwsQ0FBZSxPQUFPLENBQUMsSUFBdkIsQ0FBUCxDQURGO0tBREE7V0FHQSxLQUpTO0VBQUEsQ0F6Q1g7Q0FoQkYsQ0FBQTs7QUFBQSxXQWdFQSxHQUFjLFNBQUMsR0FBRCxFQUFNLE9BQU4sR0FBQTtBQUNaLE1BQUEsTUFBQTtBQUFBLEVBQUEsSUFBa0UsT0FBTyxDQUFDLFFBQTFFO0FBQUEsSUFBQSxPQUFPLENBQUMsT0FBUSxDQUFBLGNBQUEsQ0FBaEIsR0FBa0MsVUFBVyxDQUFBLE9BQU8sQ0FBQyxRQUFSLENBQTdDLENBQUE7R0FBQTtBQUNBLEVBQUEsSUFBNEQsT0FBTyxDQUFDLFFBQXBFO0FBQUEsSUFBQSxPQUFPLENBQUMsT0FBUSxDQUFBLFFBQUEsQ0FBaEIsR0FBNEIsVUFBVyxDQUFBLE9BQU8sQ0FBQyxRQUFSLENBQXZDLENBQUE7R0FEQTtBQUVBLE9BQUEseUJBQUEsR0FBQTtBQUNFLElBQUEsR0FBRyxDQUFDLGdCQUFKLENBQXFCLE1BQXJCLEVBQTZCLE9BQU8sQ0FBQyxPQUFRLENBQUEsTUFBQSxDQUE3QyxDQUFBLENBREY7QUFBQSxHQUhZO0FBQUEsQ0FoRWQsQ0FBQTs7QUFBQSxjQXVFQSxHQUFpQixTQUFDLEdBQUQsRUFBTSxPQUFOLEdBQUE7QUFDZixNQUFBLFFBQUE7QUFBQSxFQUFBLFFBQUEsR0FBVyxHQUFYLENBQUE7QUFDQSxFQUFBLElBQUcsT0FBTyxDQUFDLFFBQVIsS0FBb0IsT0FBTyxDQUFDLElBQS9CO0FBQ0UsSUFBQSxRQUFBLEdBQVcsSUFBSSxDQUFDLEtBQUwsQ0FBVyxHQUFHLENBQUMsWUFBZixDQUFYLENBREY7R0FEQTtTQUdBLFNBSmU7QUFBQSxDQXZFakIsQ0FBQTs7QUFBQSxRQTZFQSxHQUFXLFNBQUMsRUFBRCxHQUFBO1NBQ1QsRUFBQSxHQUFLLElBQUwsR0FBWSxHQURIO0FBQUEsQ0E3RVgsQ0FBQTs7QUFBQSxnQkFnRkEsR0FBbUIsU0FBQyxHQUFELEVBQU0sVUFBTixHQUFBO0FBQ2pCLEVBQUEsSUFBUSxRQUFBLENBQWEsSUFBQSxJQUFBLENBQUEsQ0FBSixHQUFpQixJQUFBLElBQUEsQ0FBSyxHQUFHLENBQUMsSUFBVCxDQUExQixDQUFBLEdBQTRDLFVBQXBEO1dBQUEsS0FBQTtHQURpQjtBQUFBLENBaEZuQixDQUFBOztBQUFBLGFBbUZBLEdBQWdCLFNBQUMsSUFBRCxFQUFPLE9BQVAsR0FBQTtBQUNkLE1BQUEsYUFBQTtBQUFBLEVBQUEsSUFBQSxHQUNFO0FBQUEsSUFBQSxHQUFBLEVBQUssT0FBTyxDQUFDLEdBQWI7QUFBQSxJQUNBLElBQUEsRUFBVSxJQUFBLElBQUEsQ0FBQSxDQURWO0FBQUEsSUFFQSxJQUFBLEVBQU0sSUFGTjtHQURGLENBQUE7QUFBQSxFQUlBLE9BQUEsR0FBVSxFQUFFLENBQUMsT0FBSCxDQUFXLE9BQU8sQ0FBQyxPQUFuQixFQUE0QjtBQUFBLElBQUEsR0FBQSxFQUFLLE9BQU8sQ0FBQyxHQUFiO0dBQTVCLENBSlYsQ0FBQTtTQUtBLEVBQUUsQ0FBQyxNQUFILENBQVUsT0FBTyxDQUFDLE9BQWxCLEVBQTJCLE9BQU8sQ0FBQyxJQUFuQyxFQUF5QyxJQUF6QyxFQU5jO0FBQUEsQ0FuRmhCLENBQUE7O0FBQUEsV0EyRkEsR0FBYyxTQUFDLE9BQUQsR0FBQTtBQUNaLE1BQUEsS0FBQTtBQUFBLEVBQUEsS0FBQSxHQUFRLEVBQUUsQ0FBQyxPQUFILENBQVcsT0FBTyxDQUFDLE9BQW5CLEVBQTRCO0FBQUEsSUFBQSxHQUFBLEVBQUssT0FBTyxDQUFDLEdBQWI7R0FBNUIsQ0FBUixDQUFBO0FBQ0EsRUFBQSxJQUFjLEtBQUEsSUFBVSxnQkFBQSxDQUFpQixLQUFqQixFQUF3QixPQUFPLENBQUMsYUFBaEMsQ0FBeEI7V0FBQSxLQUFLLENBQUMsS0FBTjtHQUZZO0FBQUEsQ0EzRmQsQ0FBQTs7QUFBQSxNQStGTSxDQUFDLE9BQVAsR0FBaUIsSUEvRmpCLENBQUE7Ozs7O0FDQUEsWUFBQSxDQUFBO0FBQUEsSUFBQSx1QkFBQTs7QUFBQSxPQUVBLEdBQVUsS0FBSyxDQUFBLFNBQUUsQ0FBQSxPQUZqQixDQUFBOztBQUFBLElBR0EsR0FBVSxLQUFLLENBQUEsU0FBRSxDQUFBLElBSGpCLENBQUE7O0FBQUEsS0FJQSxHQUFVLEtBQUssQ0FBQSxTQUFFLENBQUEsS0FKakIsQ0FBQTs7QUFBQSxDQU1BLEdBQUksU0FBQyxRQUFELEdBQUE7QUFDRixFQUFBLElBQUcsQ0FBQSxDQUFFLElBQUEsWUFBZ0IsQ0FBakIsQ0FBSjtBQUNFLFdBQVcsSUFBQSxDQUFBLENBQUUsUUFBRixDQUFYLENBREY7R0FBQTtBQUdBLEVBQUEsSUFBRyxDQUFBLFFBQUg7QUFDRSxXQUFPLElBQVAsQ0FERjtHQUhBO0FBTUEsRUFBQSxJQUFHLFFBQUEsWUFBb0IsQ0FBdkI7QUFDRSxXQUFPLFFBQVAsQ0FERjtHQU5BO0FBU0EsRUFBQSxJQUFHLE1BQUEsQ0FBQSxRQUFBLEtBQW1CLFFBQXRCO0FBQ0UsV0FBTyxJQUFJLENBQUMsS0FBTCxDQUFXLElBQVgsRUFBaUIsS0FBSyxDQUFDLElBQU4sQ0FBVyxRQUFRLENBQUMsZ0JBQVQsQ0FBMEIsUUFBMUIsQ0FBWCxDQUFqQixDQUFQLENBREY7R0FUQTtBQVlBLEVBQUEsSUFBRyxNQUFBLENBQUEsUUFBQSxLQUFtQixVQUF0QjtXQUNFLENBQUEsQ0FBRSxRQUFGLENBQVcsQ0FBQyxLQUFaLENBQWtCLFFBQWxCLEVBREY7R0FiRTtBQUFBLENBTkosQ0FBQTs7QUFBQSxDQXNCQyxDQUFBLFNBQUQsR0FDRTtBQUFBLEVBQUEsTUFBQSxFQUFRLENBQVI7Q0F2QkYsQ0FBQTs7QUFBQSxDQXlCQyxDQUFDLE9BQUYsR0FBWSxPQXpCWixDQUFBOztBQUFBLE1BMkJNLENBQUMsT0FBUCxHQUFpQixDQTNCakIsQ0FBQTs7Ozs7QUNBQSxZQUFBLENBQUE7QUFBQSxJQUFBLDBDQUFBOztBQUFBLE9BRUEsR0FBVSxLQUFLLENBQUEsU0FBRSxDQUFBLE9BRmpCLENBQUE7O0FBQUEsSUFHQSxHQUFVLEtBQUssQ0FBQSxTQUFFLENBQUEsSUFIakIsQ0FBQTs7QUFBQSxLQUlBLEdBQVUsS0FBSyxDQUFBLFNBQUUsQ0FBQSxLQUpqQixDQUFBOztBQUFBLG9CQU1BLEdBQ0U7QUFBQSxFQUFBLElBQUEsRUFBTSxTQUFDLFFBQUQsR0FBQTtBQUNKLElBQUEsT0FBTyxDQUFDLElBQVIsQ0FBYSxJQUFiLEVBQW1CLFNBQUMsRUFBRCxFQUFLLEdBQUwsR0FBQTthQUNqQixRQUFRLENBQUMsSUFBVCxDQUFjLEVBQWQsRUFBa0IsR0FBbEIsRUFEaUI7SUFBQSxDQUFuQixDQUFBLENBQUE7QUFFQSxXQUFPLElBQVAsQ0FISTtFQUFBLENBQU47QUFBQSxFQUtBLEtBQUEsRUFBTyxTQUFDLFFBQUQsR0FBQTtBQUNMLElBQUEsSUFBRyxRQUFRLENBQUMsVUFBVCxLQUF1QixVQUExQjtBQUNFLE1BQUEsUUFBQSxDQUFTLENBQVQsQ0FBQSxDQURGO0tBQUE7V0FHQSxRQUFRLENBQUMsZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQThDLFNBQUEsR0FBQTthQUM1QyxRQUFBLENBQVMsQ0FBVCxFQUQ0QztJQUFBLENBQTlDLEVBSks7RUFBQSxDQUxQO0FBQUEsRUFZQSxJQUFBLEVBQU0sU0FBQyxLQUFELEdBQUE7QUFDSixJQUFBLElBQThCLEtBQUEsS0FBUyxNQUF2QztBQUFBLGFBQU8sSUFBSyxDQUFBLENBQUEsQ0FBRSxDQUFDLFdBQWYsQ0FBQTtLQUFBO1dBQ0EsSUFBSSxDQUFDLElBQUwsQ0FBVSxTQUFBLEdBQUE7YUFDUixJQUFJLENBQUMsV0FBTCxHQUFtQixNQURYO0lBQUEsQ0FBVixFQUZJO0VBQUEsQ0FaTjtBQUFBLEVBaUJBLElBQUEsRUFBTSxTQUFDLFFBQUQsR0FBQTtBQUNKLFFBQUEsT0FBQTtBQUFBLElBQUEsT0FBQSxHQUFjLElBQUEsQ0FBQSxDQUFBLENBQWQsQ0FBQTtBQUFBLElBQ0EsSUFBSSxDQUFDLElBQUwsQ0FBVSxTQUFBLEdBQUE7QUFDUixNQUFBLE1BQU0sQ0FBQyxFQUFQLEdBQVksSUFBWixDQUFBO2FBQ0EsSUFBSSxDQUFDLEtBQUwsQ0FBVyxPQUFYLEVBQW9CLEtBQUssQ0FBQyxJQUFOLENBQVcsSUFBSSxDQUFDLGdCQUFMLENBQXNCLFFBQXRCLENBQVgsQ0FBcEIsRUFGUTtJQUFBLENBQVYsQ0FEQSxDQUFBO0FBSUEsV0FBTyxPQUFQLENBTEk7RUFBQSxDQWpCTjtBQUFBLEVBd0JBLElBQUEsRUFBTSxTQUFDLEtBQUQsR0FBQTtBQUNKLElBQUEsSUFBNEIsS0FBQSxLQUFTLE1BQXJDO0FBQUEsYUFBTyxJQUFLLENBQUEsQ0FBQSxDQUFFLENBQUMsU0FBZixDQUFBO0tBQUE7V0FDQSxJQUFJLENBQUMsSUFBTCxDQUFVLFNBQUEsR0FBQTthQUNSLElBQUksQ0FBQyxTQUFMLEdBQWlCLE1BRFQ7SUFBQSxDQUFWLEVBRkk7RUFBQSxDQXhCTjtBQUFBLEVBNkJBLE1BQUEsRUFBUSxTQUFDLEVBQUQsR0FBQTtXQUNOLElBQUksQ0FBQyxJQUFMLENBQVUsU0FBQSxHQUFBO2FBQ1IsSUFBSSxDQUFDLFdBQUwsQ0FBaUIsRUFBakIsRUFEUTtJQUFBLENBQVYsRUFETTtFQUFBLENBN0JSO0FBQUEsRUFpQ0EsT0FBQSxFQUFTLFNBQUMsRUFBRCxHQUFBO1dBQ1AsSUFBSSxDQUFDLElBQUwsQ0FBVSxTQUFBLEdBQUE7YUFDUixJQUFJLENBQUMsWUFBTCxDQUFrQixFQUFsQixFQUFzQixJQUFJLENBQUMsVUFBM0IsRUFEUTtJQUFBLENBQVYsRUFETztFQUFBLENBakNUO0FBQUEsRUFxQ0EsRUFBQSxFQUFJLFNBQUMsSUFBRCxFQUFPLElBQVAsR0FBQTtXQUNGLElBQUksQ0FBQyxJQUFMLENBQVUsU0FBQSxHQUFBO2FBQ1IsSUFBSSxDQUFDLGdCQUFMLENBQXNCLElBQXRCLEVBQTRCLElBQTVCLEVBRFE7SUFBQSxDQUFWLEVBREU7RUFBQSxDQXJDSjtBQUFBLEVBeUNBLEdBQUEsRUFBSyxTQUFDLElBQUQsRUFBTyxJQUFQLEdBQUE7V0FDSCxJQUFJLENBQUMsSUFBTCxDQUFVLFNBQUEsR0FBQTthQUNSLElBQUksQ0FBQyxtQkFBTCxDQUF5QixJQUF6QixFQUErQixJQUEvQixFQURRO0lBQUEsQ0FBVixFQURHO0VBQUEsQ0F6Q0w7Q0FQRixDQUFBOztBQUFBLE1Bb0RNLENBQUMsT0FBUCxHQUFpQixvQkFwRGpCLENBQUE7Ozs7O0FDQUEsWUFBQSxDQUFBO0FBQUEsSUFBQSxzREFBQTtFQUFBLGtCQUFBOztBQUFBLE9BRUEsR0FDRTtBQUFBLEVBQUEsSUFBQSxFQUFNLEVBQU47QUFBQSxFQUVBLGdCQUFBLEVBQWtCLFNBQUMsVUFBRCxHQUFBO0FBQ2hCLElBQUEsSUFBVSxJQUFDLENBQUEsSUFBSyxDQUFBLFVBQUEsQ0FBaEI7QUFBQSxZQUFBLENBQUE7S0FBQTtBQUNBLElBQUEsSUFBNEIsSUFBQyxDQUFBLElBQUQsQ0FBTSxVQUFOLENBQTVCO0FBQUEsYUFBTyxJQUFDLENBQUEsSUFBSyxDQUFBLFVBQUEsQ0FBYixDQUFBO0tBREE7V0FFQSxJQUFDLENBQUEsSUFBSyxDQUFBLFVBQUEsQ0FBTixHQUFvQixHQUhKO0VBQUEsQ0FGbEI7QUFBQSxFQU9BLElBQUEsRUFBTSxTQUFDLFVBQUQsR0FBQTtBQUNKLElBQUEsSUFBRyxZQUFZLENBQUMsT0FBYixDQUFxQixVQUFyQixDQUFIO0FBQ0UsTUFBQSxJQUFDLENBQUEsSUFBSyxDQUFBLFVBQUEsQ0FBTixHQUFvQixJQUFJLENBQUMsS0FBTCxDQUFXLFlBQVksQ0FBQyxPQUFiLENBQXFCLFVBQXJCLENBQVgsQ0FBcEIsQ0FBQTtBQUNBLGFBQU8sSUFBUCxDQUZGO0tBQUE7V0FHQSxNQUpJO0VBQUEsQ0FQTjtBQUFBLEVBYUEsS0FBQSxFQUFPLFNBQUMsVUFBRCxHQUFBO0FBQ0wsSUFBQSxJQUFDLENBQUEsSUFBSyxDQUFBLFVBQUEsQ0FBTixHQUFvQixJQUFwQixDQUFBO1dBQ0EsWUFBWSxDQUFDLFVBQWIsQ0FBd0IsVUFBeEIsRUFGSztFQUFBLENBYlA7QUFBQSxFQWlCQSxLQUFBLEVBQU8sU0FBQyxVQUFELEdBQUE7V0FDTCxZQUFZLENBQUMsT0FBYixDQUFxQixVQUFyQixFQUFpQyxJQUFJLENBQUMsU0FBTCxDQUFlLElBQUMsQ0FBQSxJQUFLLENBQUEsVUFBQSxDQUFyQixDQUFqQyxFQURLO0VBQUEsQ0FqQlA7QUFBQSxFQW9CQSxJQUFBLEVBQU0sU0FBQyxVQUFELEVBQWEsSUFBYixHQUFBO0FBQ0osSUFBQSxJQUFDLENBQUEsZ0JBQUQsQ0FBa0IsVUFBbEIsQ0FBQSxDQUFBO0FBQUEsSUFDQSxJQUFJLENBQUMsSUFBTCxHQUFlLEtBQUgsQ0FBQSxDQURaLENBQUE7QUFBQSxJQUVBLElBQUMsQ0FBQSxJQUFLLENBQUEsVUFBQSxDQUFXLENBQUMsSUFBbEIsQ0FBdUIsSUFBdkIsQ0FGQSxDQUFBO0FBQUEsSUFHQSxJQUFDLENBQUEsS0FBRCxDQUFPLFVBQVAsQ0FIQSxDQUFBO1dBSUEsT0FBQSxDQUFRLEVBQVIsRUFBWSxJQUFaLEVBTEk7RUFBQSxDQXBCTjtBQUFBLEVBMkJBLE9BQUEsRUFBUyxTQUFDLFVBQUQsRUFBYSxLQUFiLEdBQUE7QUFDUCxJQUFBLElBQUMsQ0FBQSxnQkFBRCxDQUFrQixVQUFsQixDQUFBLENBQUE7QUFDQSxJQUFBLElBQWEsQ0FBQSxLQUFiO0FBQUEsYUFBTyxFQUFQLENBQUE7S0FEQTtXQUVBLFVBQUEsQ0FBVyxJQUFDLENBQUEsSUFBSyxDQUFBLFVBQUEsQ0FBakIsRUFBOEIsUUFBQSxDQUFTLEtBQVQsQ0FBOUIsRUFITztFQUFBLENBM0JUO0FBQUEsRUFnQ0EsSUFBQSxFQUFNLFNBQUMsVUFBRCxFQUFhLEtBQWIsR0FBQTtBQUNKLElBQUEsSUFBQyxDQUFBLGdCQUFELENBQWtCLFVBQWxCLENBQUEsQ0FBQTtBQUNBLElBQUEsSUFBNEIsQ0FBQSxLQUE1QjtBQUFBLGFBQU8sSUFBQyxDQUFBLElBQUssQ0FBQSxVQUFBLENBQWIsQ0FBQTtLQURBO1dBRUEsT0FBQSxDQUFRLElBQUMsQ0FBQSxJQUFLLENBQUEsVUFBQSxDQUFkLEVBQTJCLFFBQUEsQ0FBUyxLQUFULENBQTNCLEVBSEk7RUFBQSxDQWhDTjtBQUFBLEVBcUNBLE1BQUEsRUFBUSxTQUFDLFVBQUQsRUFBYSxFQUFiLEVBQWlCLEtBQWpCLEdBQUE7QUFDTixRQUFBLG9DQUFBO0FBQUEsSUFBQSxJQUFDLENBQUEsZ0JBQUQsQ0FBa0IsVUFBbEIsQ0FBQSxDQUFBO0FBQ0E7QUFBQSxTQUFBLDJDQUFBO3NCQUFBO1VBQStDLElBQUksQ0FBQyxJQUFMLEtBQWE7QUFBNUQsUUFBQSxJQUFBLEdBQU8sSUFBUDtPQUFBO0FBQUEsS0FEQTtBQUVBLElBQUEsSUFBQSxDQUFBLElBQUE7QUFDRSxNQUFBLElBQUEsR0FBTyxFQUFQLENBQUE7QUFBQSxNQUNBLElBQUksQ0FBQyxJQUFMLEdBQWUsS0FBSCxDQUFBLENBRFosQ0FBQTtBQUFBLE1BRUEsSUFBQyxDQUFBLElBQUssQ0FBQSxVQUFBLENBQVcsQ0FBQyxJQUFsQixDQUF1QixJQUF2QixDQUZBLENBREY7S0FGQTtBQU1BLElBQUEsSUFBeUMsSUFBekM7QUFBQSxXQUFBLFlBQUE7eUJBQUE7QUFBQSxRQUFBLElBQUssQ0FBQSxHQUFBLENBQUwsR0FBWSxHQUFaLENBQUE7QUFBQSxPQUFBO0tBTkE7QUFBQSxJQU9BLElBQUMsQ0FBQSxLQUFELENBQU8sVUFBUCxDQVBBLENBQUE7V0FRQSxPQUFBLENBQVEsRUFBUixFQUFZLElBQVosRUFUTTtFQUFBLENBckNSO0FBQUEsRUFnREEsTUFBQSxFQUFRLFNBQUMsVUFBRCxFQUFhLEVBQWIsR0FBQTtBQUNOLFFBQUEsMkJBQUE7QUFBQSxJQUFBLElBQUMsQ0FBQSxnQkFBRCxDQUFrQixVQUFsQixDQUFBLENBQUE7QUFDQTtBQUFBLFNBQUEsMkNBQUE7c0JBQUE7VUFBMkUsSUFBSSxDQUFDLElBQUwsS0FBYTtBQUF4RixRQUFBLEtBQUEsR0FBUSxJQUFDLENBQUEsSUFBSyxDQUFBLFVBQUEsQ0FBVyxDQUFDLE9BQWxCLENBQTBCLElBQTFCLENBQVI7T0FBQTtBQUFBLEtBREE7QUFFQSxJQUFBLElBQWdCLENBQUEsS0FBQSxJQUFjLEtBQUEsS0FBVyxDQUF6QztBQUFBLGFBQU8sS0FBUCxDQUFBO0tBRkE7QUFHQSxJQUFBLElBQXFDLEtBQUEsR0FBUSxDQUFBLENBQTdDO0FBQUEsTUFBQSxJQUFDLENBQUEsSUFBSyxDQUFBLFVBQUEsQ0FBVyxDQUFDLE1BQWxCLENBQXlCLEtBQXpCLEVBQWdDLENBQWhDLENBQUEsQ0FBQTtLQUhBO0FBQUEsSUFJQSxJQUFDLENBQUEsS0FBRCxDQUFPLFVBQVAsQ0FKQSxDQUFBO1dBS0EsS0FOTTtFQUFBLENBaERSO0NBSEYsQ0FBQTs7QUFBQSxLQTREQSxHQUFRLFNBQUEsR0FBQTtBQUNOLE1BQUEsVUFBQTtBQUFBLEVBQUEsSUFBQSxHQUFXLElBQUEsSUFBQSxDQUFBLENBQU0sQ0FBQyxPQUFQLENBQUEsQ0FBWCxDQUFBO1NBQ0EsSUFBQSxHQUFPLHNDQUFzQyxDQUFDLE9BQXZDLENBQStDLE9BQS9DLEVBQXdELFNBQUMsQ0FBRCxHQUFBO0FBQzdELFFBQUEsSUFBQTtBQUFBLElBQUEsQ0FBQSxHQUFJLENBQUMsSUFBQSxHQUFPLElBQUksQ0FBQyxNQUFMLENBQUEsQ0FBQSxHQUFnQixFQUF4QixDQUFBLEdBQThCLEVBQTlCLEdBQW1DLENBQXZDLENBQUE7QUFBQSxJQUNBLElBQUEsR0FBTyxJQUFJLENBQUMsS0FBTCxDQUFXLElBQUEsR0FBSyxFQUFoQixDQURQLENBQUE7QUFBQSxJQUVBLENBQUEsR0FBTyxDQUFBLEtBQUssR0FBUixHQUFpQixDQUFqQixHQUF3QixDQUFBLEdBQUksQ0FBSixHQUFRLENBRnBDLENBQUE7V0FHQSxDQUFDLENBQUMsUUFBRixDQUFXLEVBQVgsRUFKNkQ7RUFBQSxDQUF4RCxFQUZEO0FBQUEsQ0E1RFIsQ0FBQTs7QUFBQSxPQW9FQSxHQUFVLFNBQUMsR0FBRCxFQUFNLFNBQU4sR0FBQTtBQUNSLE1BQUEsc0JBQUE7QUFBQSxFQUFBLE1BQUEsR0FBUyxFQUFULENBQUE7QUFDQSxPQUFBLDBDQUFBO21CQUFBO1FBQW1ELFNBQUEsQ0FBVSxJQUFWO0FBQW5ELE1BQUEsTUFBTSxDQUFDLElBQVAsQ0FBWSxPQUFBLENBQVEsRUFBUixFQUFZLElBQVosQ0FBWixDQUFBO0tBQUE7QUFBQSxHQURBO1NBRUEsT0FIUTtBQUFBLENBcEVWLENBQUE7O0FBQUEsVUF5RUEsR0FBYSxTQUFDLEdBQUQsRUFBTSxTQUFOLEdBQUE7QUFDWCxNQUFBLHNCQUFBO0FBQUEsRUFBQSxNQUFBLEdBQVMsRUFBVCxDQUFBO0FBQ0EsT0FBQSwwQ0FBQTttQkFBQTtRQUFpRCxTQUFBLENBQVUsSUFBVjtBQUFqRCxhQUFPLE9BQUEsQ0FBUSxNQUFSLEVBQWdCLElBQWhCLENBQVA7S0FBQTtBQUFBLEdBREE7U0FFQSxPQUhXO0FBQUEsQ0F6RWIsQ0FBQTs7QUFBQSxRQThFQSxHQUFXLFNBQUMsS0FBRCxHQUFBO1NBQ1QsU0FBQyxHQUFELEdBQUE7QUFDRSxRQUFBLFFBQUE7QUFBQSxTQUFBLFlBQUE7dUJBQUE7VUFBd0MsS0FBTSxDQUFBLEdBQUEsQ0FBTixLQUFnQixHQUFJLENBQUEsR0FBQTtBQUE1RCxlQUFPLEtBQVA7T0FBQTtBQUFBLEtBQUE7V0FDQSxLQUZGO0VBQUEsRUFEUztBQUFBLENBOUVYLENBQUE7O0FBQUEsT0FtRkEsR0FBVSxTQUFBLEdBQUE7QUFDUixNQUFBLFNBQUE7QUFBQSxFQURTLG9CQUFLLDhEQUNkLENBQUE7QUFBQSxFQUFBLElBQUksQ0FBQyxPQUFMLENBQWEsU0FBQyxNQUFELEdBQUE7QUFDWCxRQUFBLGdCQUFBO0FBQUE7U0FBQSxnQkFBQSxHQUFBO1VBQXVELGNBQWMsQ0FBQyxJQUFmLENBQW9CLE1BQXBCLEVBQTRCLE1BQTVCO0FBQXZELHNCQUFBLEdBQUksQ0FBQSxNQUFBLENBQUosR0FBYyxNQUFPLENBQUEsTUFBQSxFQUFyQjtPQUFBO0FBQUE7b0JBRFc7RUFBQSxDQUFiLENBQUEsQ0FBQTtTQUVBLElBSFE7QUFBQSxDQW5GVixDQUFBOztBQUFBLE1Bd0ZNLENBQUMsT0FBUCxHQUFpQixPQXhGakIsQ0FBQTs7Ozs7QUNBQSxZQUFBLENBQUE7QUFBQSxJQUFBLEtBQUE7O0FBQUEsS0FFQSxHQUNFO0FBQUEsRUFBQSxXQUFBLEVBQWEsRUFBYjtBQUFBLEVBRUEsU0FBQSxFQUFXLFNBQUMsS0FBRCxFQUFRLElBQVIsR0FBQTtBQUNULElBQUEsSUFBRyxDQUFBLElBQUUsQ0FBQSxXQUFZLENBQUEsS0FBQSxDQUFqQjtBQUE2QixNQUFBLElBQUMsQ0FBQSxXQUFZLENBQUEsS0FBQSxDQUFiLEdBQXNCLEVBQXRCLENBQTdCO0tBQUE7QUFDQSxJQUFBLElBQUcsSUFBQyxDQUFBLFdBQVksQ0FBQSxLQUFBLENBQU0sQ0FBQyxPQUFwQixDQUE0QixJQUE1QixDQUFBLEtBQXFDLENBQUEsQ0FBeEM7QUFBZ0QsTUFBQSxJQUFDLENBQUEsV0FBWSxDQUFBLEtBQUEsQ0FBTSxDQUFDLElBQXBCLENBQXlCLElBQXpCLENBQUEsQ0FBaEQ7S0FGUztFQUFBLENBRlg7QUFBQSxFQU9BLFdBQUEsRUFBYSxTQUFDLEtBQUQsRUFBUSxJQUFSLEdBQUE7QUFDWCxRQUFBLGdCQUFBO0FBQUEsSUFBQSxTQUFBLEdBQVksSUFBQyxDQUFBLFdBQVksQ0FBQSxLQUFBLENBQXpCLENBQUE7QUFDQSxJQUFBLElBQVUsQ0FBQSxTQUFWO0FBQUEsWUFBQSxDQUFBO0tBREE7QUFBQSxJQUVBLEtBQUEsR0FBUSxTQUFTLENBQUMsT0FBVixDQUFrQixJQUFsQixDQUZSLENBQUE7QUFHQSxJQUFBLElBQThCLEtBQUEsR0FBUSxDQUFBLENBQXRDO0FBQUEsTUFBQSxTQUFTLENBQUMsTUFBVixDQUFpQixLQUFqQixFQUF3QixDQUF4QixDQUFBLENBQUE7S0FKVztFQUFBLENBUGI7QUFBQSxFQWNBLE9BQUEsRUFBUyxTQUFDLEtBQUQsRUFBUSxRQUFSLEdBQUE7QUFDUCxRQUFBLHVDQUFBO0FBQUEsSUFBQSxJQUFnQixDQUFBLElBQUUsQ0FBQSxXQUFZLENBQUEsS0FBQSxDQUE5QjtBQUFBLGFBQU8sS0FBUCxDQUFBO0tBQUE7QUFDQSxJQUFBLElBQUcsQ0FBQSxRQUFTLENBQUMsSUFBYjtBQUF1QixNQUFBLFFBQVEsQ0FBQyxJQUFULEdBQWdCLEtBQWhCLENBQXZCO0tBREE7QUFBQSxJQUVBLFNBQUEsR0FBWSxJQUFDLENBQUEsV0FBWSxDQUFBLEtBQUEsQ0FGekIsQ0FBQTtBQUdBO1NBQUEsZ0RBQUE7K0JBQUE7QUFBQSxvQkFBQSxRQUFBLENBQVMsUUFBVCxFQUFBLENBQUE7QUFBQTtvQkFKTztFQUFBLENBZFQ7QUFBQSxFQW9CQSxNQUFBLEVBQVEsU0FBQyxHQUFELEdBQUE7QUFDTixRQUFBLElBQUE7QUFBQSxJQUFBLElBQUEsR0FBTyxLQUFLLENBQUEsU0FBRSxDQUFBLEtBQUssQ0FBQyxJQUFiLENBQWtCLFNBQWxCLEVBQTZCLENBQTdCLENBQVAsQ0FBQTtBQUFBLElBQ0EsSUFBSSxDQUFDLE9BQUwsQ0FBYSxTQUFDLE1BQUQsR0FBQTtBQUNYLFVBQUEsZ0JBQUE7QUFBQTtXQUFBLGdCQUFBLEdBQUE7QUFBQSxzQkFBQSxHQUFJLENBQUEsTUFBQSxDQUFKLEdBQWMsTUFBTyxDQUFBLE1BQUEsRUFBckIsQ0FBQTtBQUFBO3NCQURXO0lBQUEsQ0FBYixDQURBLENBQUE7V0FHQSxJQUpNO0VBQUEsQ0FwQlI7Q0FIRixDQUFBOztBQUFBLE1BNkJNLENBQUMsT0FBUCxHQUFpQixLQTdCakIsQ0FBQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJcInVzZSBzdHJpY3RcIlxuXG51ICAgICAgICAgICAgPSByZXF1aXJlKFwiLi9taWNyby5jb3JlLmNvZmZlZVwiKVxuZG9tICAgICAgICAgID0gcmVxdWlyZShcIi4vbWljcm8uZG9tLmNvZmZlZVwiKVxudXRpbHMgICAgICAgID0gcmVxdWlyZShcIi4vbWljcm8udXRpbHMuY29mZmVlXCIpXG5sb2NhbHN0b3JhZ2UgPSByZXF1aXJlKFwiLi9taWNyby5sb2NhbHN0b3JhZ2UuY29mZmVlXCIpXG5hamF4ICAgICAgICAgPSByZXF1aXJlKFwiLi9taWNyby5hamF4LmNvZmZlZVwiKVxuXG51dGlscy5leHRlbmQgdTo6LCBkb21cbnV0aWxzLmV4dGVuZCB1LCB1dGlscywgZGI6IGxvY2Fsc3RvcmFnZSwgYWpheFxuXG53aW5kb3cudSA9IHUgaWYgdHlwZW9mIHdpbmRvdyBpc250ICd1bmRlZmluZWQnXG5cbm1vZHVsZS5leHBvcnRzID0gdSIsIlwidXNlIHN0cmljdFwiXG5cbnV0aWxzID0gcmVxdWlyZSBcIi4vbWljcm8udXRpbHMuY29mZmVlXCJcbmRiICAgID0gcmVxdWlyZSBcIi4vbWljcm8ubG9jYWxzdG9yYWdlLmNvZmZlZVwiXG5cbkRFRkFVTFQgPVxuICBUWVBFOiBcIkdFVFwiXG4gIE1JTUU6IFwianNvblwiXG5cbk1JTUVfVFlQRVMgPVxuICBqc29uOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICBmb3JtOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiXG4gIGh0bWw6IFwidGV4dC9odG1sXCJcbiAgdGV4dDogXCJ0ZXh0L3BsYWluXCJcblxuYWpheCA9XG4gIGFqYXhTZXR0aW5nczpcbiAgICB0eXBlICAgICAgICAgOiBERUZBVUxULlRZUEVcbiAgICBhc3luYyAgICAgICAgOiB0cnVlXG4gICAgY2FjaGUgICAgICAgIDogZmFsc2VcbiAgICBjYWNoZURCICAgICAgOiAneGhycydcbiAgICBtaW51dGVzQ2FjaGVkOiA1XG4gICAgc3VjY2VzcyAgICAgIDogKHJlcykgLT5cbiAgICBlcnJvciAgICAgICAgOiAocmVzKSAtPlxuICAgIGRhdGFUeXBlICAgICA6IERFRkFVTFQuTUlNRVxuICAgIGhlYWRlcnMgICAgICA6IHt9XG4gICAgY3Jvc3NEb21haW4gIDogZmFsc2VcbiAgICB0aW1lb3V0ICAgICAgOiAwXG5cbiAgYWpheDogKG9wdGlvbnMpIC0+XG4gICAgQGFqYXhTZXR0aW5ncy5oZWFkZXJzID0ge31cbiAgICBzZXR0aW5ncyA9IHV0aWxzLmV4dGVuZCB7fSwgQGFqYXhTZXR0aW5nc1xuICAgIG9wdGlvbnMgID0gdXRpbHMuZXh0ZW5kIHNldHRpbmdzLCBvcHRpb25zXG5cbiAgICBpZiBvcHRpb25zLmNhY2hlIGFuZCBfY2hlY2tDYWNoZShvcHRpb25zKVxuICAgICAgcmV0dXJuIG9wdGlvbnMuc3VjY2VzcyBfY2hlY2tDYWNoZShvcHRpb25zKVxuXG4gICAgb3B0aW9ucy5kYXRhID0gQHNlcmlhbGl6ZSBvcHRpb25zXG5cbiAgICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgeGhyLm9wZW4gb3B0aW9ucy50eXBlLCBvcHRpb25zLnVybCwgb3B0aW9ucy5hc3luY1xuXG4gICAgeGhyLm9ubG9hZCA9IC0+XG4gICAgICBpZiB4aHIuc3RhdHVzID49IDIwMCBhbmQgeGhyLnN0YXR1cyA8IDQwMFxuICAgICAgICBkYXRhID0gX3BhcnNlUmVzcG9uc2UgeGhyLCBvcHRpb25zXG4gICAgICAgIGlmIG9wdGlvbnMuY2FjaGUgdGhlbiBfY2FjaGVSZXF1ZXN0IGRhdGEsIG9wdGlvbnNcbiAgICAgICAgb3B0aW9ucy5zdWNjZXNzIGRhdGFcblxuICAgIHhoci5vbmVycm9yID0gLT5cbiAgICAgIG9wdGlvbnMuZXJyb3IgJ2Vycm9yJ1xuXG4gICAgX3hockhlYWRlcnMgeGhyLCBvcHRpb25zXG5cbiAgICB4aHIuc2VuZCBvcHRpb25zLmRhdGFcbiAgICB4aHJcblxuICBzZXJpYWxpemU6IChvcHRpb25zKSAtPlxuICAgIGRhdGEgPSBvcHRpb25zLmRhdGFcbiAgICBpZiBvcHRpb25zLmRhdGFUeXBlIGlzIERFRkFVTFQuTUlNRVxuICAgICAgZGF0YSA9IEpTT04uc3RyaW5naWZ5IG9wdGlvbnMuZGF0YVxuICAgIGRhdGFcblxuIyAtLSBQcml2YXRlIG1ldGhvZHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbl94aHJIZWFkZXJzID0gKHhociwgb3B0aW9ucykgLT5cbiAgb3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IE1JTUVfVFlQRVNbb3B0aW9ucy5kYXRhVHlwZV0gaWYgb3B0aW9ucy5kYXRhVHlwZVxuICBvcHRpb25zLmhlYWRlcnNbJ0FjY2VwdCddID0gTUlNRV9UWVBFU1tvcHRpb25zLmRhdGFUeXBlXSBpZiBvcHRpb25zLmRhdGFUeXBlXG4gIGZvciBoZWFkZXIgb2Ygb3B0aW9ucy5oZWFkZXJzXG4gICAgeGhyLnNldFJlcXVlc3RIZWFkZXIgaGVhZGVyLCBvcHRpb25zLmhlYWRlcnNbaGVhZGVyXVxuICByZXR1cm5cblxuX3BhcnNlUmVzcG9uc2UgPSAoeGhyLCBvcHRpb25zKSAtPlxuICByZXNwb25zZSA9IHhoclxuICBpZiBvcHRpb25zLmRhdGFUeXBlIGlzIERFRkFVTFQuTUlNRVxuICAgIHJlc3BvbnNlID0gSlNPTi5wYXJzZSB4aHIucmVzcG9uc2VUZXh0XG4gIHJlc3BvbnNlXG5cbl9tc1RvTWluID0gKG1zKSAtPlxuICBtcyAvIDEwMDAgLyA2MFxuXG5fY2FjaGVOb3RFeHBpcmVkID0gKHJlcSwgZXhwaXJlVGltZSkgLT5cbiAgdHJ1ZSBpZiBfbXNUb01pbihuZXcgRGF0ZSgpIC0gbmV3IERhdGUocmVxLmRhdGUpKSA8IGV4cGlyZVRpbWVcblxuX2NhY2hlUmVxdWVzdCA9IChkYXRhLCBvcHRpb25zKSAtPlxuICBpdGVtID1cbiAgICB1cmw6IG9wdGlvbnMudXJsXG4gICAgZGF0ZTogbmV3IERhdGUoKVxuICAgIGRhdGE6IGRhdGFcbiAgeGhyRGF0YSA9IGRiLmZpbmRPbmUgb3B0aW9ucy5jYWNoZURCLCB1cmw6IG9wdGlvbnMudXJsXG4gIGRiLnVwZGF0ZSBvcHRpb25zLmNhY2hlREIsIHhockRhdGEudXVpZCwgaXRlbVxuXG5fY2hlY2tDYWNoZSA9IChvcHRpb25zKSAtPlxuICBjYWNoZSA9IGRiLmZpbmRPbmUgb3B0aW9ucy5jYWNoZURCLCB1cmw6IG9wdGlvbnMudXJsXG4gIGNhY2hlLmRhdGEgaWYgY2FjaGUgYW5kIF9jYWNoZU5vdEV4cGlyZWQgY2FjaGUsIG9wdGlvbnMubWludXRlc0NhY2hlZFxuXG5tb2R1bGUuZXhwb3J0cyA9IGFqYXgiLCIndXNlIHN0cmljdCdcblxuZm9yRWFjaCA9IEFycmF5Ojpmb3JFYWNoXG5wdXNoICAgID0gQXJyYXk6OnB1c2hcbnNsaWNlICAgPSBBcnJheTo6c2xpY2VcblxudSA9IChzZWxlY3RvcikgLT5cbiAgaWYgISh0aGlzIGluc3RhbmNlb2YgdSlcbiAgICByZXR1cm4gbmV3IHUoc2VsZWN0b3IpXG5cbiAgaWYgIXNlbGVjdG9yXG4gICAgcmV0dXJuIHRoaXNcblxuICBpZiBzZWxlY3RvciBpbnN0YW5jZW9mIHVcbiAgICByZXR1cm4gc2VsZWN0b3JcblxuICBpZiB0eXBlb2Ygc2VsZWN0b3IgaXMgJ3N0cmluZydcbiAgICByZXR1cm4gcHVzaC5hcHBseSB0aGlzLCBzbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKVxuXG4gIGlmIHR5cGVvZiBzZWxlY3RvciBpcyAnZnVuY3Rpb24nXG4gICAgdShkb2N1bWVudCkucmVhZHkgc2VsZWN0b3JcblxudTo6ID1cbiAgbGVuZ3RoOiAwXG5cbnUuVkVSU0lPTiA9ICcwLjIuMCdcblxubW9kdWxlLmV4cG9ydHMgPSB1IiwiJ3VzZSBzdHJpY3QnXG5cbmZvckVhY2ggPSBBcnJheTo6Zm9yRWFjaFxucHVzaCAgICA9IEFycmF5OjpwdXNoXG5zbGljZSAgID0gQXJyYXk6OnNsaWNlXG5cbm1hbmlwdWxhdGlvbnNNZXRob2RzID1cbiAgZWFjaDogKGNhbGxiYWNrKSAtPlxuICAgIGZvckVhY2guY2FsbCB0aGlzLCAoZWwsIGlkeCkgLT5cbiAgICAgIGNhbGxiYWNrLmNhbGwgZWwsIGlkeFxuICAgIHJldHVybiB0aGlzXG5cbiAgcmVhZHk6IChjYWxsYmFjaykgLT5cbiAgICBpZiBkb2N1bWVudC5yZWFkeVN0YXRlIGlzICdjb21wbGV0ZSdcbiAgICAgIGNhbGxiYWNrIHVcblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgJ0RPTUNvbnRlbnRMb2FkZWQnLCAtPlxuICAgICAgY2FsbGJhY2sgdVxuXG4gIHRleHQ6ICh2YWx1ZSkgLT5cbiAgICByZXR1cm4gdGhpc1swXS50ZXh0Q29udGVudCBpZiB2YWx1ZSBpcyB1bmRlZmluZWRcbiAgICB0aGlzLmVhY2ggLT5cbiAgICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZVxuXG4gIGZpbmQ6IChzZWxlY3RvcikgLT5cbiAgICByZXN1bHRzID0gbmV3IHUoKVxuICAgIHRoaXMuZWFjaCAtPlxuICAgICAgd2luZG93LmVsID0gdGhpc1xuICAgICAgcHVzaC5hcHBseSByZXN1bHRzLCBzbGljZS5jYWxsKHRoaXMucXVlcnlTZWxlY3RvckFsbCBzZWxlY3RvcilcbiAgICByZXR1cm4gcmVzdWx0c1xuXG4gIGh0bWw6ICh2YWx1ZSkgLT5cbiAgICByZXR1cm4gdGhpc1swXS5pbm5lckhUTUwgaWYgdmFsdWUgaXMgdW5kZWZpbmVkXG4gICAgdGhpcy5lYWNoIC0+XG4gICAgICB0aGlzLmlubmVySFRNTCA9IHZhbHVlXG5cbiAgYXBwZW5kOiAoZWwpIC0+XG4gICAgdGhpcy5lYWNoIC0+XG4gICAgICB0aGlzLmFwcGVuZENoaWxkIGVsXG5cbiAgcHJlcGVuZDogKGVsKSAtPlxuICAgIHRoaXMuZWFjaCAtPlxuICAgICAgdGhpcy5pbnNlcnRCZWZvcmUgZWwsIHRoaXMuZmlyc3RDaGlsZFxuXG4gIG9uOiAodHlwZSwgZnVuYykgLT5cbiAgICB0aGlzLmVhY2ggLT5cbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lciB0eXBlLCBmdW5jXG5cbiAgb2ZmOiAodHlwZSwgZnVuYykgLT5cbiAgICB0aGlzLmVhY2ggLT5cbiAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lciB0eXBlLCBmdW5jXG5cbm1vZHVsZS5leHBvcnRzID0gbWFuaXB1bGF0aW9uc01ldGhvZHMiLCJcInVzZSBzdHJpY3RcIlxuXG5sb2NhbERCID1cbiAgZGF0YToge31cblxuICBfY2hlY2tDb2xsZWN0aW9uOiAoY29sbGVjdGlvbikgLT5cbiAgICByZXR1cm4gaWYgQGRhdGFbY29sbGVjdGlvbl1cbiAgICByZXR1cm4gQGRhdGFbY29sbGVjdGlvbl0gaWYgQGxvYWQgY29sbGVjdGlvblxuICAgIEBkYXRhW2NvbGxlY3Rpb25dID0gW11cblxuICBsb2FkOiAoY29sbGVjdGlvbikgLT5cbiAgICBpZiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSBjb2xsZWN0aW9uXG4gICAgICBAZGF0YVtjb2xsZWN0aW9uXSA9IEpTT04ucGFyc2UgbG9jYWxTdG9yYWdlLmdldEl0ZW0oY29sbGVjdGlvbilcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZmFsc2VcblxuICBjbGVhcjogKGNvbGxlY3Rpb24pIC0+XG4gICAgQGRhdGFbY29sbGVjdGlvbl0gPSBudWxsXG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0gY29sbGVjdGlvblxuXG4gIHdyaXRlOiAoY29sbGVjdGlvbikgLT5cbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSBjb2xsZWN0aW9uLCBKU09OLnN0cmluZ2lmeSBAZGF0YVtjb2xsZWN0aW9uXVxuXG4gIHNhdmU6IChjb2xsZWN0aW9uLCBkYXRhKSAtPlxuICAgIEBfY2hlY2tDb2xsZWN0aW9uIGNvbGxlY3Rpb25cbiAgICBkYXRhLnV1aWQgPSBkbyBfdXVpZFxuICAgIEBkYXRhW2NvbGxlY3Rpb25dLnB1c2ggZGF0YVxuICAgIEB3cml0ZSBjb2xsZWN0aW9uXG4gICAgX2V4dGVuZCB7fSwgZGF0YVxuXG4gIGZpbmRPbmU6IChjb2xsZWN0aW9uLCBhdHRycykgLT5cbiAgICBAX2NoZWNrQ29sbGVjdGlvbiBjb2xsZWN0aW9uXG4gICAgcmV0dXJuIHt9IGlmICFhdHRyc1xuICAgIF9maWx0ZXJPbmUgQGRhdGFbY29sbGVjdGlvbl0sIF9tYXRjaGVzIGF0dHJzXG5cbiAgZmluZDogKGNvbGxlY3Rpb24sIGF0dHJzKSAtPlxuICAgIEBfY2hlY2tDb2xsZWN0aW9uIGNvbGxlY3Rpb25cbiAgICByZXR1cm4gQGRhdGFbY29sbGVjdGlvbl0gaWYgIWF0dHJzXG4gICAgX2ZpbHRlciBAZGF0YVtjb2xsZWN0aW9uXSwgX21hdGNoZXMgYXR0cnNcblxuICB1cGRhdGU6IChjb2xsZWN0aW9uLCBpZCwgYXR0cnMpIC0+XG4gICAgQF9jaGVja0NvbGxlY3Rpb24gY29sbGVjdGlvblxuICAgIGRhdGEgPSBpdGVtIGZvciBpdGVtIGluIEBkYXRhW2NvbGxlY3Rpb25dIHdoZW4gaXRlbS51dWlkIGlzIGlkXG4gICAgdW5sZXNzIGRhdGFcbiAgICAgIGRhdGEgPSB7fVxuICAgICAgZGF0YS51dWlkID0gZG8gX3V1aWRcbiAgICAgIEBkYXRhW2NvbGxlY3Rpb25dLnB1c2ggZGF0YVxuICAgIGRhdGFba2V5XSA9IHZhbCBmb3Iga2V5LCB2YWwgb2YgYXR0cnMgaWYgZGF0YVxuICAgIEB3cml0ZSBjb2xsZWN0aW9uXG4gICAgX2V4dGVuZCB7fSwgZGF0YVxuXG4gIHJlbW92ZTogKGNvbGxlY3Rpb24sIGlkKSAtPlxuICAgIEBfY2hlY2tDb2xsZWN0aW9uIGNvbGxlY3Rpb25cbiAgICBpbmRleCA9IEBkYXRhW2NvbGxlY3Rpb25dLmluZGV4T2YoaXRlbSkgZm9yIGl0ZW0gaW4gQGRhdGFbY29sbGVjdGlvbl0gd2hlbiBpdGVtLnV1aWQgaXMgaWRcbiAgICByZXR1cm4gZmFsc2UgaWYgbm90IGluZGV4IGFuZCBpbmRleCBpc250IDBcbiAgICBAZGF0YVtjb2xsZWN0aW9uXS5zcGxpY2UgaW5kZXgsIDEgaWYgaW5kZXggPiAtMVxuICAgIEB3cml0ZSBjb2xsZWN0aW9uXG4gICAgdHJ1ZVxuXG4jIC0tIFByaXZhdGUgbWV0aG9kcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuX3V1aWQgPSAtPlxuICBkYXRlID0gbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgdXVpZCA9ICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UgL1t4eV0vZywgKGMpIC0+XG4gICAgciA9IChkYXRlICsgTWF0aC5yYW5kb20oKSAqIDE2KSAlIDE2IHwgMFxuICAgIGRhdGUgPSBNYXRoLmZsb29yIGRhdGUvMTZcbiAgICB2ID0gaWYgYyBpcyAneCcgdGhlbiByIGVsc2UgciAmIDcgfCA4XG4gICAgdi50b1N0cmluZyAxNlxuXG5fZmlsdGVyID0gKG9iaiwgcHJlZGljYXRlKSAtPlxuICByZXN1bHQgPSBbXVxuICByZXN1bHQucHVzaCBfZXh0ZW5kKHt9LCBpdGVtKSBmb3IgaXRlbSBpbiBvYmogd2hlbiBwcmVkaWNhdGUgaXRlbVxuICByZXN1bHRcblxuX2ZpbHRlck9uZSA9IChvYmosIHByZWRpY2F0ZSkgLT5cbiAgcmVzdWx0ID0ge31cbiAgcmV0dXJuIF9leHRlbmQgcmVzdWx0LCBpdGVtIGZvciBpdGVtIGluIG9iaiB3aGVuIHByZWRpY2F0ZSBpdGVtXG4gIHJlc3VsdFxuXG5fbWF0Y2hlcyA9IChhdHRycykgLT5cbiAgKG9iaikgLT5cbiAgICByZXR1cm4gZmFsc2UgZm9yIGtleSwgdmFsIG9mIGF0dHJzIHdoZW4gYXR0cnNba2V5XSBpc250IG9ialtrZXldXG4gICAgdHJ1ZVxuXG5fZXh0ZW5kID0gKG9iaiwgYXJncy4uLikgLT5cbiAgYXJncy5mb3JFYWNoIChzb3VyY2UpIC0+XG4gICAgb2JqW21ldGhvZF0gPSBzb3VyY2VbbWV0aG9kXSBmb3IgbWV0aG9kIG9mIHNvdXJjZSB3aGVuIGhhc093blByb3BlcnR5LmNhbGwgc291cmNlLCBtZXRob2RcbiAgb2JqXG5cbm1vZHVsZS5leHBvcnRzID0gbG9jYWxEQiIsIid1c2Ugc3RyaWN0J1xuXG51dGlscyA9XG4gIHN1YnNjcmliZXJzOiB7fVxuXG4gIHN1YnNjcmliZTogKHRvcGljLCBmdW5jKSAtPlxuICAgIGlmICFAc3Vic2NyaWJlcnNbdG9waWNdIHRoZW4gQHN1YnNjcmliZXJzW3RvcGljXSA9IFtdXG4gICAgaWYgQHN1YnNjcmliZXJzW3RvcGljXS5pbmRleE9mKGZ1bmMpIGlzIC0xIHRoZW4gQHN1YnNjcmliZXJzW3RvcGljXS5wdXNoIGZ1bmNcbiAgICByZXR1cm5cblxuICB1bnN1YnNjcmliZTogKHRvcGljLCBmdW5jKSAtPlxuICAgIGxpc3RlbmVycyA9IEBzdWJzY3JpYmVyc1t0b3BpY11cbiAgICByZXR1cm4gaWYgIWxpc3RlbmVyc1xuICAgIGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YoZnVuYylcbiAgICBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKSBpZiBpbmRleCA+IC0xXG4gICAgcmV0dXJuXG5cbiAgcHVibGlzaDogKHRvcGljLCBldmVudE9iaikgLT5cbiAgICByZXR1cm4gZmFsc2UgaWYgIUBzdWJzY3JpYmVyc1t0b3BpY11cbiAgICBpZiAhZXZlbnRPYmoudHlwZSB0aGVuIGV2ZW50T2JqLnR5cGUgPSB0b3BpY1xuICAgIGxpc3RlbmVycyA9IEBzdWJzY3JpYmVyc1t0b3BpY11cbiAgICBsaXN0ZW5lcihldmVudE9iaikgZm9yIGxpc3RlbmVyIGluIGxpc3RlbmVyc1xuXG4gIGV4dGVuZDogKG9iaikgLT5cbiAgICBhcmdzID0gQXJyYXk6OnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVxuICAgIGFyZ3MuZm9yRWFjaCAoc291cmNlKSAtPlxuICAgICAgb2JqW21ldGhvZF0gPSBzb3VyY2VbbWV0aG9kXSBmb3IgbWV0aG9kIG9mIHNvdXJjZVxuICAgIG9ialxuXG5tb2R1bGUuZXhwb3J0cyA9IHV0aWxzIl19
