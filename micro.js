(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var ajax, dom, localstorage, u, utils;

u = require("./micro.core.coffee");

dom = require("./micro.dom.coffee");

utils = require("./micro.utils.coffee");

localstorage = require("./micro.localstorage.coffee");

ajax = require("./micro.ajax.coffee");

utils.extend(u.prototype, dom);

utils.extend(u, utils, {
  db: localstorage
}, ajax);

if (typeof window !== 'undefined') {
  window.u = u;
}

module.exports = u;



},{"./micro.ajax.coffee":2,"./micro.core.coffee":3,"./micro.dom.coffee":4,"./micro.localstorage.coffee":5,"./micro.utils.coffee":6}],2:[function(require,module,exports){
"use strict";
var DEFAULT, MIME_TYPES, ajax, db, utils, _cacheNotExpired, _cacheRequest, _checkCache, _msToMin, _parseResponse, _xhrHeaders;

utils = require("./micro.utils.coffee");

db = require("./micro.localstorage.coffee");

DEFAULT = {
  TYPE: "GET",
  MIME: "json"
};

MIME_TYPES = {
  json: "application/json",
  form: "application/x-www-form-urlencoded",
  html: "text/html",
  text: "text/plain"
};

ajax = {
  ajaxSettings: {
    type: DEFAULT.TYPE,
    async: true,
    cache: false,
    cacheDB: 'xhrs',
    minutesCached: 5,
    success: function(res) {},
    error: function(res) {},
    dataType: DEFAULT.MIME,
    headers: {},
    crossDomain: false,
    timeout: 0
  },
  ajax: function(options) {
    var settings, xhr;
    this.ajaxSettings.headers = {};
    settings = utils.extend({}, this.ajaxSettings);
    options = utils.extend(settings, options);
    if (options.cache && _checkCache(options)) {
      return options.success(_checkCache(options));
    }
    options.data = this.serialize(options);
    xhr = new XMLHttpRequest();
    xhr.open(options.type, options.url, options.async);
    xhr.onload = function() {
      var data;
      if (xhr.status >= 200 && xhr.status < 400) {
        data = _parseResponse(xhr, options);
        if (options.cache) {
          _cacheRequest(data, options);
        }
        return options.success(data);
      }
    };
    xhr.onerror = function() {
      return options.error('error');
    };
    _xhrHeaders(xhr, options);
    xhr.send(options.data);
    return xhr;
  },
  serialize: function(options) {
    var data;
    data = options.data;
    if (options.dataType === DEFAULT.MIME) {
      data = JSON.stringify(options.data);
    }
    return data;
  }
};

_xhrHeaders = function(xhr, options) {
  var header;
  if (options.dataType) {
    options.headers['Content-Type'] = MIME_TYPES[options.dataType];
  }
  if (options.dataType) {
    options.headers['Accept'] = MIME_TYPES[options.dataType];
  }
  for (header in options.headers) {
    xhr.setRequestHeader(header, options.headers[header]);
  }
};

_parseResponse = function(xhr, options) {
  var response;
  response = xhr;
  if (options.dataType === DEFAULT.MIME) {
    response = JSON.parse(xhr.responseText);
  }
  return response;
};

_msToMin = function(ms) {
  return ms / 1000 / 60;
};

_cacheNotExpired = function(req, expireTime) {
  if (_msToMin(new Date() - new Date(req.date)) < expireTime) {
    return true;
  }
};

_cacheRequest = function(data, options) {
  var item, xhrData;
  item = {
    url: options.url,
    date: new Date(),
    data: data
  };
  xhrData = db.findOne(options.cacheDB, {
    url: options.url
  });
  return db.update(options.cacheDB, xhrData.uuid, item);
};

_checkCache = function(options) {
  var cache;
  cache = db.findOne(options.cacheDB, {
    url: options.url
  });
  if (cache && _cacheNotExpired(cache, options.minutesCached)) {
    return cache.data;
  }
};

module.exports = ajax;



},{"./micro.localstorage.coffee":5,"./micro.utils.coffee":6}],3:[function(require,module,exports){
'use strict';
var forEach, push, slice, u;

forEach = Array.prototype.forEach;

push = Array.prototype.push;

slice = Array.prototype.slice;

u = function(selector) {
  if (!(this instanceof u)) {
    return new u(selector);
  }
  if (!selector) {
    return this;
  }
  if (selector instanceof u) {
    return selector;
  }
  if (typeof selector === 'string') {
    return push.apply(this, slice.call(document.querySelectorAll(selector)));
  }
  if (typeof selector === 'function') {
    return u(document).ready(selector);
  }
};

u.prototype = {
  length: 0
};

u.VERSION = '0.2.0';

module.exports = u;



},{}],4:[function(require,module,exports){
'use strict';
var forEach, manipulationsMethods, push, slice;

forEach = Array.prototype.forEach;

push = Array.prototype.push;

slice = Array.prototype.slice;

manipulationsMethods = {
  each: function(callback) {
    forEach.call(this, function(el, idx) {
      return callback.call(el, idx);
    });
    return this;
  },
  ready: function(callback) {
    if (document.readyState === 'complete') {
      callback(u);
    }
    return document.addEventListener('DOMContentLoaded', function() {
      return callback(u);
    });
  },
  text: function(value) {
    if (value === void 0) {
      return this[0].textContent;
    }
    return this.each(function() {
      return this.textContent = value;
    });
  },
  find: function(selector) {
    var results;
    results = new u();
    this.each(function() {
      return push.apply(results, slice.call(this.querySelectorAll(selector)));
    });
    return results;
  },
  html: function(value) {
    if (value === void 0) {
      return this[0].innerHTML;
    }
    return this.each(function() {
      return this.innerHTML = value;
    });
  },
  append: function(el) {
    return this.each(function() {
      return this.appendChild(el);
    });
  },
  prepend: function(el) {
    return this.each(function() {
      return this.insertBefore(el, this.firstChild);
    });
  },
  on: function(type, func) {
    return this.each(function() {
      return this.addEventListener(type, func);
    });
  },
  off: function(type, func) {
    return this.each(function() {
      return this.removeEventListener(type, func);
    });
  }
};

module.exports = manipulationsMethods;



},{}],5:[function(require,module,exports){
"use strict";
var localDB, _extend, _filter, _filterOne, _matches, _uuid,
  __slice = [].slice;

localDB = {
  data: {},
  _checkCollection: function(collection) {
    if (this.data[collection]) {
      return;
    }
    if (this.load(collection)) {
      return this.data[collection];
    }
    return this.data[collection] = [];
  },
  load: function(collection) {
    if (localStorage.getItem(collection)) {
      this.data[collection] = JSON.parse(localStorage.getItem(collection));
      return true;
    }
    return false;
  },
  clear: function(collection) {
    this.data[collection] = null;
    return localStorage.removeItem(collection);
  },
  write: function(collection) {
    return localStorage.setItem(collection, JSON.stringify(this.data[collection]));
  },
  save: function(collection, data) {
    this._checkCollection(collection);
    data.uuid = _uuid();
    this.data[collection].push(data);
    this.write(collection);
    return _extend({}, data);
  },
  findOne: function(collection, attrs) {
    this._checkCollection(collection);
    if (!attrs) {
      return {};
    }
    return _filterOne(this.data[collection], _matches(attrs));
  },
  find: function(collection, attrs) {
    this._checkCollection(collection);
    if (!attrs) {
      return this.data[collection];
    }
    return _filter(this.data[collection], _matches(attrs));
  },
  update: function(collection, id, attrs) {
    var data, item, key, val, _i, _len, _ref;
    this._checkCollection(collection);
    _ref = this.data[collection];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      if (item.uuid === id) {
        data = item;
      }
    }
    if (!data) {
      data = {};
      data.uuid = _uuid();
      this.data[collection].push(data);
    }
    if (data) {
      for (key in attrs) {
        val = attrs[key];
        data[key] = val;
      }
    }
    this.write(collection);
    return _extend({}, data);
  },
  remove: function(collection, id) {
    var index, item, _i, _len, _ref;
    this._checkCollection(collection);
    _ref = this.data[collection];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      if (item.uuid === id) {
        index = this.data[collection].indexOf(item);
      }
    }
    if (!index && index !== 0) {
      return false;
    }
    if (index > -1) {
      this.data[collection].splice(index, 1);
    }
    this.write(collection);
    return true;
  }
};

_uuid = function() {
  var date, uuid;
  date = new Date().getTime();
  return uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r, v;
    r = (date + Math.random() * 16) % 16 | 0;
    date = Math.floor(date / 16);
    v = c === 'x' ? r : r & 7 | 8;
    return v.toString(16);
  });
};

_filter = function(obj, predicate) {
  var item, result, _i, _len;
  result = [];
  for (_i = 0, _len = obj.length; _i < _len; _i++) {
    item = obj[_i];
    if (predicate(item)) {
      result.push(_extend({}, item));
    }
  }
  return result;
};

_filterOne = function(obj, predicate) {
  var item, result, _i, _len;
  result = {};
  for (_i = 0, _len = obj.length; _i < _len; _i++) {
    item = obj[_i];
    if (predicate(item)) {
      return _extend(result, item);
    }
  }
  return result;
};

_matches = function(attrs) {
  return function(obj) {
    var key, val;
    for (key in attrs) {
      val = attrs[key];
      if (attrs[key] !== obj[key]) {
        return false;
      }
    }
    return true;
  };
};

_extend = function() {
  var args, obj;
  obj = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  args.forEach(function(source) {
    var method, _results;
    _results = [];
    for (method in source) {
      if (hasOwnProperty.call(source, method)) {
        _results.push(obj[method] = source[method]);
      }
    }
    return _results;
  });
  return obj;
};

module.exports = localDB;



},{}],6:[function(require,module,exports){
'use strict';
var utils;

utils = {
  subscribers: {},
  subscribe: function(topic, func) {
    if (!this.subscribers[topic]) {
      this.subscribers[topic] = [];
    }
    if (this.subscribers[topic].indexOf(func) === -1) {
      this.subscribers[topic].push(func);
    }
  },
  unsubscribe: function(topic, func) {
    var index, listeners;
    listeners = this.subscribers[topic];
    if (!listeners) {
      return;
    }
    index = listeners.indexOf(func);
    if (index > -1) {
      listeners.splice(index, 1);
    }
  },
  publish: function(topic, eventObj) {
    var listener, listeners, _i, _len, _results;
    if (!this.subscribers[topic]) {
      return false;
    }
    if (!eventObj.type) {
      eventObj.type = topic;
    }
    listeners = this.subscribers[topic];
    _results = [];
    for (_i = 0, _len = listeners.length; _i < _len; _i++) {
      listener = listeners[_i];
      _results.push(listener(eventObj));
    }
    return _results;
  },
  extend: function(obj) {
    var args;
    args = Array.prototype.slice.call(arguments, 1);
    args.forEach(function(source) {
      var method, _results;
      _results = [];
      for (method in source) {
        _results.push(obj[method] = source[method]);
      }
      return _results;
    });
    return obj;
  }
};

module.exports = utils;



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
